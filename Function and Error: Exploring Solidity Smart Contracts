// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UniqueContract {
    address public user;
    uint256 public value;
    string private secretMessage;

    // Constructor
    constructor() {
        user = msg.sender;
    }

    // Function to set a new value with additional conditions
    function setValue(uint256 _newValue, string memory _secret) external {
        require(msg.sender == user, "Only the owner can set the value!");
        require(_newValue != 0, "New value cannot be zero!");

        value = _newValue;
        secretMessage = _secret;
    }

    // Function to retrieve the secret message
    function getSecretMessage() external view returns (string memory) {
        return secretMessage;
    }

    // Function to assert the value is not zero
    function assertValue(uint256 _value) external pure returns (uint256) {
        assert(_value != 0);

        return _value;
    }

    // Function to revert if value is zero
    function revertIfZero(uint256 _value) external pure returns (uint256) {
        if (_value == 0) {
            revert("Value cannot be zero!");
        }
        return _value;
    }
}
